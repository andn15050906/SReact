// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SReact.Models;

namespace SReact.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220826075122_mi3")]
    partial class mi3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SReact.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AppUserId");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CoverImg");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SReact.Models.ChatGroup", b =>
                {
                    b.Property<int>("ChatGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("FoundingDate");

                    b.Property<string>("GroupAdminId");

                    b.Property<string>("GroupName");

                    b.HasKey("ChatGroupId");

                    b.HasIndex("GroupAdminId");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("SReact.Models.ChatRecord", b =>
                {
                    b.Property<int>("ChatRecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("File");

                    b.Property<int?>("GroupToChatGroupId");

                    b.Property<string>("Message");

                    b.Property<string>("PrivateToId");

                    b.Property<string>("SenderId");

                    b.Property<DateTime>("Time");

                    b.HasKey("ChatRecordId");

                    b.HasIndex("GroupToChatGroupId");

                    b.HasIndex("PrivateToId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatRecords");
                });

            modelBuilder.Entity("SReact.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<string>("File");

                    b.Property<int?>("SrcCommentCommentId");

                    b.Property<int?>("SrcPostPostId");

                    b.Property<DateTime>("Time");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SrcCommentCommentId");

                    b.HasIndex("SrcPostPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SReact.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.Property<string>("User1Id");

                    b.Property<string>("User2Id");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("SReact.Models.Member_ChatGroup", b =>
                {
                    b.Property<string>("MemberId");

                    b.Property<int>("ChatGroupId");

                    b.HasKey("MemberId", "ChatGroupId");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("Member_ChatGroup");
                });

            modelBuilder.Entity("SReact.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link");

                    b.Property<string>("Message");

                    b.Property<string>("ReceiverId");

                    b.Property<string>("SenderId");

                    b.Property<string>("Status");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Type");

                    b.HasKey("NotificationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SReact.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<string>("File");

                    b.Property<string>("Restriction");

                    b.Property<DateTime>("Time");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SReact.Models.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<int?>("CommentId");

                    b.Property<string>("React");

                    b.Property<int?>("SrcChatRecordChatRecordId");

                    b.Property<int?>("SrcPostPostId");

                    b.HasKey("ReactionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentId");

                    b.HasIndex("SrcChatRecordChatRecordId");

                    b.HasIndex("SrcPostPostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SReact.Models.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ResponseCommentId");

                    b.Property<int?>("SourceCommentId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseCommentId");

                    b.HasIndex("SourceCommentId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("SReact.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagName");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SReact.Models.TagPost", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("PostId");

                    b.HasKey("TagId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("TagPost");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SReact.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SReact.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SReact.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SReact.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SReact.Models.ChatGroup", b =>
                {
                    b.HasOne("SReact.Models.AppUser", "GroupAdmin")
                        .WithMany()
                        .HasForeignKey("GroupAdminId");
                });

            modelBuilder.Entity("SReact.Models.ChatRecord", b =>
                {
                    b.HasOne("SReact.Models.ChatGroup", "GroupTo")
                        .WithMany()
                        .HasForeignKey("GroupToChatGroupId");

                    b.HasOne("SReact.Models.AppUser", "PrivateTo")
                        .WithMany()
                        .HasForeignKey("PrivateToId");

                    b.HasOne("SReact.Models.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("SReact.Models.Comment", b =>
                {
                    b.HasOne("SReact.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SReact.Models.Comment", "SrcComment")
                        .WithMany()
                        .HasForeignKey("SrcCommentCommentId");

                    b.HasOne("SReact.Models.Post", "SrcPost")
                        .WithMany("Comments")
                        .HasForeignKey("SrcPostPostId");
                });

            modelBuilder.Entity("SReact.Models.Friend", b =>
                {
                    b.HasOne("SReact.Models.AppUser", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id");

                    b.HasOne("SReact.Models.AppUser", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id");
                });

            modelBuilder.Entity("SReact.Models.Member_ChatGroup", b =>
                {
                    b.HasOne("SReact.Models.ChatGroup", "ChatGroup")
                        .WithMany("Member_ChatGroups")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SReact.Models.AppUser", "Member")
                        .WithMany("Member_ChatGroups")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SReact.Models.Notification", b =>
                {
                    b.HasOne("SReact.Models.AppUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("SReact.Models.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("SReact.Models.Post", b =>
                {
                    b.HasOne("SReact.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("SReact.Models.Reaction", b =>
                {
                    b.HasOne("SReact.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SReact.Models.Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("SReact.Models.ChatRecord", "SrcChatRecord")
                        .WithMany("Reactions")
                        .HasForeignKey("SrcChatRecordChatRecordId");

                    b.HasOne("SReact.Models.Post", "SrcPost")
                        .WithMany("Reactions")
                        .HasForeignKey("SrcPostPostId");
                });

            modelBuilder.Entity("SReact.Models.Reply", b =>
                {
                    b.HasOne("SReact.Models.Comment", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseCommentId");

                    b.HasOne("SReact.Models.Comment", "Source")
                        .WithMany("Replies")
                        .HasForeignKey("SourceCommentId");
                });

            modelBuilder.Entity("SReact.Models.TagPost", b =>
                {
                    b.HasOne("SReact.Models.Post", "Post")
                        .WithMany("TagPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SReact.Models.Tag", "Tag")
                        .WithMany("TagPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
